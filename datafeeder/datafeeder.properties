### The following properties are inherited from the geOrchestra default.properties,
### if you want to override them for datafeeder, uncomment them.

# PostgreSQL server domain name
# pgsqlHost=database

# PostgreSQL server port
# pgsqlPort=5432

# PostgreSQL database name
# pgsqlDatabase=georchestra

# User to connect to PostgreSQL server
# pgsqlUser=georchestra

# Password to connect to PostgreSQL server
# pgsqlPassword=georchestra

####################################
#  Datafeeder specific properties  #
####################################

# pgsqlSchema=datafeeder

# maximum size allowed for uploaded files. (e.g. 128MB, GB can't be used, only KB or MB)
file-upload.max-file-size=50MB
# maximum size allowed for multipart/form-data requests (e.g. 128MB, GB can't be used, only KB or MB)
file-upload.max-request-size=100MB
# size threshold after which files will be written to disk.
file-upload.file-size-threshold=1MB
# directory location where files will be stored by the servlet container once the request exceeds the {@link #fileSizeThreshold}
file-upload.temporary-location=${java.io.tmpdir}/datafeeder/tmp
# directory location where files will be stored.
file-upload.persistent-location=${java.io.tmpdir}/datafeeder/uploads
# select the file to serve as the front-end application configuration
front-end.config.uri=file:${georchestra.datadir}/datafeeder/frontend-config.json

datafeeder.publishing.geoserver.api-url=http://geoserver:8080/geoserver/rest
datafeeder.publishing.geoserver.public-url=${scheme}://${domainName}/geoserver

datafeeder.publishing.geonetwork.api-url=http://geonetwork:8080/geonetwork
datafeeder.publishing.geonetwork.public-url=${scheme}://${domainName}/geonetwork

# GeoTools DataStore connection params used inside datafeeder when importing
# uploaded datasets to the target store
datafeeder.publishing.backend.local.dbtype=postgis
datafeeder.publishing.backend.local.host=${pgsqlHost}
datafeeder.publishing.backend.local.port=${pgsqlPort}
datafeeder.publishing.backend.local.database=${pgsqlDatabase}
#<schema> is a placeholder to be replaced by the actual schema computed from the "sec-org" request header
datafeeder.publishing.backend.geoserver.schema=<schema>
datafeeder.publishing.backend.local.user=${pgsqlUser}
datafeeder.publishing.backend.local.passwd=${pgsqlPassword}
datafeeder.publishing.backend.local.preparedStatements=true

# GeoTools DataStore connection params to be used when configuring a GeoServer
# datastore to access the imported datasets
datafeeder.publishing.backend.geoserver.dbtype=postgis
datafeeder.publishing.backend.geoserver.preparedStatements=true
#<schema> is a placeholder to be replaced by the actual schema computed from the "sec-org" request header
datafeeder.publishing.backend.geoserver.schema=<schema>
#datafeeder.publishing.backend.geoserver.jndiReferenceName=java:comp/env/jdbc/datafeeder
#if a JNDI data source is configured in geoserver, uncomment the above line and comment out the following ones 
datafeeder.publishing.backend.geoserver.host=${pgsqlHost}
datafeeder.publishing.backend.geoserver.port=${pgsqlPort}
datafeeder.publishing.backend.geoserver.database=${pgsqlDatabase}
datafeeder.publishing.backend.geoserver.user=${pgsqlUser}
datafeeder.publishing.backend.geoserver.passwd=${pgsqlPassword}

# note how to set a property with spaces: property.prefix.[name\ with\ spaces]=value
datafeeder.publishing.backend.geoserver.[Loose\ bbox]=false
datafeeder.publishing.backend.geoserver.[Estimated\ extends]=true


